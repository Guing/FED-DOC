import store from "@/store";
import { TextComponentProps } from "@/defaultProps";
import { testComponent } from "@/store/editor";
import { cloneDeep } from "lodash-es";
const testComponentData = cloneDeep(testComponent);
describe("测试vuex store", () => {
  it("检查全局初始state是否正常", () => {
    expect(store.state).toHaveProperty("user");
    expect(store.state).toHaveProperty("templates");
    expect(store.state).toHaveProperty("editor");
  });
  describe("测试user模块", () => {
    it("检查user的初始state是否正常", () => {
      expect(store.state.user).toHaveProperty("isLogin");
      expect(store.state.user).toHaveProperty("userName");
    });
    it("检查user的login的mutations", () => {
      store.commit("login");
      expect(store.state.user.isLogin).toBe(true);
      expect(store.state.user.userName).toBe("viking");
    });
    it("检查user的logout的mutations", () => {
      store.commit("logout");
      expect(store.state.user.isLogin).toBe(false);
    });
  });
  describe("测试editor模块", () => {
    it("检查editor的初始state是否正常", () => {
      expect(store.state.editor).toHaveProperty("components");
      expect(store.state.editor).toHaveProperty("currentElement");
    });
    it("检查editor的ADD_COMPONENT的mutations", () => {
      const props: Partial<TextComponentProps> = {
        text: "哈哈",
      };
      store.commit("ADD_COMPONENT", props);
      expect(store.state.editor.components).toHaveLength(
        testComponentData.length + 1
      );
    });
    it("检查editor的DEL_COMPONENT的mutations", () => {
      const id: string = store.state.editor.components[0].id;
      const length = store.state.editor.components.length;
      store.commit("DEL_COMPONENT", id);
      expect(store.state.editor.components).toHaveLength(length - 1);
    });
    it("检查editor的SET_CURRENT的mutations", () => {
      const id: string = testComponentData[1].id;
      store.commit("SET_CURRENT", id);
      expect(store.state.editor.currentElement).toBe(id);
      expect(store.getters.getCurrentElement.id ).toBe(id);
    });
    it("检查editor的UPDATE_CURRENT的mutations", () => {
      const data = { key: "text", value: "baba" };
      const id: string = testComponentData[1].id;
      store.commit("SET_CURRENT", id);
      store.commit("UPDATE_CURRENT", data);
      expect(store.getters.getCurrentElement.props.text).toBe("baba");
    });
  });
});
